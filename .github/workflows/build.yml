name: Build GUI App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Read version from VERSION file
        id: get_version
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pymodbus openpyxl pyinstaller

      - name: Build with PyInstaller (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          if [ -f "modbus_exporter_windows.spec" ]; then
            pyinstaller modbus_exporter_windows.spec
          else
            pyinstaller --onefile --windowed --name modbus_exporter main.py
          fi
        shell: bash

      - name: Setup Code Signing Certificate (Windows)
        if: matrix.os == 'windows-latest'
        env:
          CODE_SIGNING_CERTIFICATE_BASE64: ${{ secrets.CODE_SIGNING_CERTIFICATE_BASE64 }}
        run: |
          if [ ! -z "$CODE_SIGNING_CERTIFICATE_BASE64" ]; then
            # Create certificate from base64 encoded secret
            echo "$CODE_SIGNING_CERTIFICATE_BASE64" | base64 -d > certificate.pfx
            echo "Certificate created for code signing"
            echo "CERTIFICATE_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "No code signing certificate provided, skipping code signing"
            echo "CERTIFICATE_AVAILABLE=false" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Sign Windows Executable
        if: matrix.os == 'windows-latest' && env.CERTIFICATE_AVAILABLE == 'true'
        env:
          CODE_SIGNING_PASSWORD: ${{ secrets.CODE_SIGNING_PASSWORD }}
        run: |
          # Sign the executable using PowerShell
          powershell -Command "& {./scripts/sign_executable.ps1 -ExecutablePath 'dist/modbus_exporter.exe' -CertificatePassword '$env:CODE_SIGNING_PASSWORD'}"
        shell: cmd

      - name: Extract Public Certificate (Windows)
        if: matrix.os == 'windows-latest' && env.CERTIFICATE_AVAILABLE == 'true'
        run: |
          # Extract public certificate for distribution
          powershell -Command "& {$cert = Get-PfxCertificate -FilePath 'certificate.pfx'; Export-Certificate -Cert $cert -FilePath 'dist/modbus_exporter_certificate.cer'}"
        shell: cmd

      - name: Verify Code Signature (Windows)
        if: matrix.os == 'windows-latest' && env.CERTIFICATE_AVAILABLE == 'true'
        run: |
          # Verify the signature
          powershell -Command "& {$sig = Get-AuthenticodeSignature -FilePath 'dist/modbus_exporter.exe'; Write-Host 'Signature Status:' $sig.Status; Write-Host 'Signer:' $sig.SignerCertificate.Subject}"
        shell: cmd

      - name: Cleanup Certificate (Windows)
        if: matrix.os == 'windows-latest' && env.CERTIFICATE_AVAILABLE == 'true'
        run: |
          # Remove certificate file for security
          rm -f certificate.pfx
        shell: bash

      - name: Build with PyInstaller (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          if [ -f "modbus_exporter.spec" ]; then
            pyinstaller modbus_exporter.spec
          else
            pyinstaller --onefile --windowed --name modbus_exporter main.py
          fi
        shell: bash

      - name: Rename executables with version (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd dist
          if [ -f "modbus_exporter.exe" ]; then
            mv "modbus_exporter.exe" "modbus_exporter_v${{ env.VERSION }}_windows.exe"
          fi
          if [ -d "modbus_exporter" ]; then
            mv "modbus_exporter" "modbus_exporter_v${{ env.VERSION }}_windows"
          fi
        shell: bash

      - name: Rename executables with version (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cd dist
          if [ -f "modbus_exporter" ]; then
            mv "modbus_exporter" "modbus_exporter_v${{ env.VERSION }}_macos"
          fi
          if [ -d "modbus_exporter.app" ]; then
            mv "modbus_exporter.app" "modbus_exporter_v${{ env.VERSION }}_macos.app"
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: modbus-exporter-v${{ env.VERSION }}-${{ matrix.os }}
          path: dist/*

  release:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read version from VERSION file
        id: get_version
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: modbus-exporter-v${{ env.VERSION }}-windows-latest
          path: ./windows-artifacts

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: modbus-exporter-v${{ env.VERSION }}-macos-latest
          path: ./macos-artifacts

      - name: List downloaded artifacts
        run: |
          echo "Windows artifacts:"
          ls -la windows-artifacts/
          echo "macOS artifacts:"
          ls -la macos-artifacts/

      - name: Create ZIP archives
        run: |
          cd windows-artifacts
          zip -r ../modbus_exporter_v${{ env.VERSION }}_windows.zip .
          cd ../macos-artifacts
          zip -r ../modbus_exporter_v${{ env.VERSION }}_macos.zip .
          cd ..
          echo "Created ZIP files:"
          ls -la *.zip

      - name: Check if release already exists
        id: check_release
        run: |
          if git tag -l | grep -q "v${{ env.VERSION }}"; then
            echo "Release v${{ env.VERSION }} already exists, skipping release creation"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Release v${{ env.VERSION }} does not exist, proceeding with creation"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          name: Modbus Data Exporter v${{ env.VERSION }}
          body: |
            ## Modbus Data Exporter v${{ env.VERSION }}
            
            ### Features:
            - Sensor Pairing Sheet generation
            - Enhanced Diagnostics with signal quality analysis
            - Live Diagnostics View with column visibility controls
            - Version information display with tooltip
            - Excel and CSV export capabilities
            
            ### Bug Fixes:
            - Fixed double .xlsx extension issue
            - Improved GUI stability and resizing
            
            ### Downloads:
            - **Windows**: `modbus_exporter_v${{ env.VERSION }}_windows.zip`
            - **macOS**: `modbus_exporter_v${{ env.VERSION }}_macos.zip`
            
            ### Installation:
            1. Download the appropriate file for your operating system
            2. Extract the ZIP file
            3. **For Windows**: If you get security warnings, install the certificate first:
               - Download `install_certificate.ps1` from the scripts folder
               - Run it as Administrator to install the code signing certificate
               - This will make the application trusted by your system
            4. Run the executable
            
            **Note**: On macOS, you may need to right-click and select "Open" to bypass security warnings.
            
            ### Code Signing:
            The Windows executable is digitally signed for security and trust. If you encounter security warnings:
            1. Download the certificate installation script from the repository
            2. Run it as Administrator to install the certificate
            3. The application will then be trusted by your system and security software
          files: |
            modbus_exporter_v${{ env.VERSION }}_windows.zip
            modbus_exporter_v${{ env.VERSION }}_macos.zip
          draft: false
          prerelease: false
